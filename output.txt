Comment: /**********************************************	        Comment: /**********************************************								
Comment:  * Id: bush0386					        Comment:  * Id: bush0386								
Comment:  *								Comment:  *								
Comment:  * Compile: gcc -Wall w08.c -o w08				Comment:  * Compile: gcc -Wall w08.c -o w08								
Comment:  * Run: ./w08 w08.txt				        Comment:  * Run: ./w08 w08.txt								
Comment:  *								Comment:  *								
Comment:  * This program reads in a file and breaks it 		Comment:  * This program reads in a file and breaks it 								
Comment:  * into tokens, strings, comments, characters, 		Comment:  * into tokens, strings, comments, characters, 								
Comment:  * operators, keywords, numerics, and identifiers 		Comment:  * operators, keywords, numerics, and identifiers 								
Comment:  * and prints the results.					Comment:  * and prints the results.								
Comment:  **********************************************/	      | Comment:  **********************************************/
Token: #define							Token: #define
Identifier: MAXTOKEN						Identifier: MAXTOKEN
Numeric: 128							Numeric: 128
Token: #define							Token: #define
Identifier: MAXCHAR						Identifier: MAXCHAR
Numeric: 128							Numeric: 128
Token: #define							Token: #define
Identifier: MAXSTRING						Identifier: MAXSTRING
Numeric: 256							Numeric: 256
Token: #define							Token: #define
Identifier: MAXCMT						Identifier: MAXCMT
Numeric: 256							Numeric: 256
Token: #define							Token: #define
Identifier: MAXOP						Identifier: MAXOP
Numeric: 8							Numeric: 8
Token: #define							Token: #define
Identifier: MAXKEY						Identifier: MAXKEY
Numeric: 32							Numeric: 32
Token: #define							Token: #define
Identifier: MAXWORD						Identifier: MAXWORD
Numeric: 12							Numeric: 12
Token: #include							Token: #include
Operator: <							Operator: <
Token: stdio.h							Token: stdio.h
Operator: >							Operator: >
Token: #include							Token: #include
Operator: <							Operator: <
Token: stdlib.h							Token: stdlib.h
Operator: >							Operator: >
Token: #include							Token: #include
Operator: <							Operator: <
Token: stdbool.h						Token: stdbool.h
Operator: >							Operator: >
Token: #include							Token: #include
Operator: <							Operator: <
Token: ctype.h							Token: ctype.h
Operator: >							Operator: >
Token: #include							Token: #include
Operator: <							Operator: <
Token: string.h							Token: string.h
Operator: >							Operator: >
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Linked						Identifier: Linked
Identifier: List						Identifier: List
Identifier: for							Identifier: for
Identifier: keywords						Identifier: keywords
Identifier: struct						Identifier: struct
Identifier: Node						Identifier: Node
Operator: {							Operator: {
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: words						Identifier: words
Operator: [							Operator: [
Identifier: MAXWORD						Identifier: MAXWORD
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: size						Identifier: size
Keyword: of							Keyword: of
Identifier: words						Identifier: words
Identifier: struct						Identifier: struct
Identifier: Node						Identifier: Node
Operator: *							Operator: *
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: typedef						Identifier: typedef
Identifier: struct						Identifier: struct
Identifier: Node						Identifier: Node
Operator: *							Operator: *
Identifier: NodePtr						Identifier: NodePtr
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: head						Identifier: head
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Prototypes						Identifier: Prototypes
Identifier: for							Identifier: for
Identifier: functions						Identifier: functions
Identifier: void						Identifier: void
Identifier: Sorter						Identifier: Sorter
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: BuildComment					Identifier: BuildComment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: cmt							Identifier: cmt
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintToken						Identifier: PrintToken
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: tok							Identifier: tok
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintCharacter					Identifier: PrintCharacter
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: chars						Identifier: chars
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintString						Identifier: PrintString
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: str							Identifier: str
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintComment					Identifier: PrintComment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: cmt							Identifier: cmt
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintOperator					Identifier: PrintOperator
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: op							Identifier: op
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintKey						Identifier: PrintKey
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key							Identifier: key
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintNumeric					Identifier: PrintNumeric
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: num							Identifier: num
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintIdentifier					Identifier: PrintIdentifier
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: id							Identifier: id
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: singlecomment					Identifier: singlecomment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: mltcomment						Identifier: mltcomment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isalphabet						Identifier: isalphabet
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isend						Identifier: isend
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: issymbol						Identifier: issymbol
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isoperator						Identifier: isoperator
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isoperators						Identifier: isoperators
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Numeric: d							Numeric: d
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isspecialop						Identifier: isspecialop
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isspecialop2					Identifier: isspecialop2
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Numeric: d							Numeric: d
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Operator: *							Operator: *
Identifier: iskey						Identifier: iskey
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isspecialkey					Identifier: isspecialkey
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key							Identifier: key
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: cutstring						Identifier: cutstring
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: original						Identifier: original
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: after						Identifier: after
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: IsNumeric						Identifier: IsNumeric
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: num							Identifier: num
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: IsIdentifier					Identifier: IsIdentifier
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: id							Identifier: id
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: Copy						Identifier: Copy
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Numeric: a							Numeric: a
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Numeric: b							Numeric: b
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Linked						Identifier: Linked
Identifier: List						Identifier: List
Identifier: Prototypes						Identifier: Prototypes
Identifier: void						Identifier: void
Identifier: CopyArray						Identifier: CopyArray
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: arr1						Identifier: arr1
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: arr2						Identifier: arr2
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: PrintList						Identifier: PrintList
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: data						Identifier: data
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: DeleteNode						Identifier: DeleteNode
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: void						Identifier: void
Identifier: DeleteList						Identifier: DeleteList
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: isempty						Identifier: isempty
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: Length						Identifier: Length
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: FindKey						Identifier: FindKey
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: DeleteKey						Identifier: DeleteKey
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: main						Identifier: main
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: argc						Identifier: argc
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: argv						Identifier: argv
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: error						Identifier: error
Identifier: checking						Identifier: checking
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: argc						Identifier: argc
Operator: <							Operator: <
Numeric: 2							Numeric: 2
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Error inputing file\n"					String: "Error inputing file\n"
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: return						Identifier: return
Operator: -							Operator: -
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: variables						Identifier: variables
Identifier: FILE						Identifier: FILE
Operator: *							Operator: *
Identifier: fp							Identifier: fp
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Identifier: size_t						Identifier: size_t
Identifier: len							Identifier: len
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: read						Identifier: read
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Token: #							Token: #
Keyword: of							Keyword: of
Identifier: chars						Identifier: chars
Identifier: per							Identifier: per
Identifier: line						Identifier: line
Identifier: int							Identifier: int
Identifier: mltcmt						Identifier: mltcmt
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Keyword: bool							Keyword: bool
Identifier: finish						Identifier: finish
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: open						Identifier: open
Identifier: file						Identifier: file
Identifier: fp							Identifier: fp
Operator: =							Operator: =
Identifier: fopen						Identifier: fopen
Operator: (							Operator: (
Identifier: argv						Identifier: argv
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: ,							Operator: ,
String: "r"							String: "r"
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: loop						Identifier: loop
Identifier: through						Identifier: through
Identifier: file						Identifier: file
Keyword: and							Keyword: and
Identifier: get							Identifier: get
Identifier: each						Identifier: each
Identifier: line						Identifier: line
Keyword: while							Keyword: while
Operator: (							Operator: (
Operator: (							Operator: (
Identifier: read						Identifier: read
Operator: =							Operator: =
Identifier: getline						Identifier: getline
Operator: (							Operator: (
Operator: &							Operator: &
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Operator: &							Operator: &
Identifier: len							Identifier: len
Operator: ,							Operator: ,
Identifier: fp							Identifier: fp
Operator: )							Operator: )
Operator: )							Operator: )
Operator: !=							Operator: !=
Operator: -							Operator: -
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: multiple						Identifier: multiple
Identifier: line						Identifier: line
Identifier: comment						Identifier: comment
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: mltcomment						Identifier: mltcomment
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Numeric: 0							Numeric: 0
Operator: ,							Operator: ,
Identifier: read						Identifier: read
Operator: )							Operator: )
Operator: |							Operator: |
Operator: |							Operator: |
Identifier: mltcmt						Identifier: mltcmt
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: mltcmt						Identifier: mltcmt
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: finish						Identifier: finish
Operator: =							Operator: =
Identifier: BuildComment					Identifier: BuildComment
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Numeric: 0							Numeric: 0
Operator: ,							Operator: ,
Identifier: read						Identifier: read
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Comment: %s"						String: "Comment: %s"
Operator: ,							Operator: ,
Identifier: line						Identifier: line
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: finish						Identifier: finish
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: mltcmt						Identifier: mltcmt
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: read						Identifier: read
Operator: =							Operator: =
Identifier: getline						Identifier: getline
Operator: (							Operator: (
Operator: &							Operator: &
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Operator: &							Operator: &
Identifier: len							Identifier: len
Operator: ,							Operator: ,
Identifier: fp							Identifier: fp
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: mltcmt						Identifier: mltcmt
Operator: !=							Operator: !=
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Identifier: Sorter						Identifier: Sorter
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: read						Identifier: read
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: close						Identifier: close
Identifier: file						Identifier: file
Identifier: fclose						Identifier: fclose
Operator: (							Operator: (
Identifier: fp							Identifier: fp
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: free						Identifier: free
Identifier: line						Identifier: line
Keyword: if							Keyword: if
Identifier: not							Identifier: not
Identifier: NULL						Identifier: NULL
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: free						Identifier: free
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: sort						Identifier: sort
Identifier: the							Identifier: the
Identifier: string						Identifier: string
Identifier: into						Identifier: into
Identifier: different						Identifier: different
Identifier: parts						Identifier: parts
Identifier: void						Identifier: void
Identifier: Sorter						Identifier: Sorter
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: z							Identifier: z
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Operator: *							Operator: *
Identifier: result						Identifier: result
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: MAXTOKEN						Identifier: MAXTOKEN
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Keyword: character						Keyword: character
Operator: [							Operator: [
Identifier: MAXCHAR						Identifier: MAXCHAR
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: string						Identifier: string
Operator: [							Operator: [
Identifier: MAXSTRING						Identifier: MAXSTRING
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: comment						Identifier: comment
Operator: [							Operator: [
Identifier: MAXCMT						Identifier: MAXCMT
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: MAXOP						Identifier: MAXOP
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: key							Identifier: key
Operator: [							Operator: [
Identifier: MAXKEY						Identifier: MAXKEY
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: tok_count						Identifier: tok_count
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: char_count						Identifier: char_count
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: str_count						Identifier: str_count
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: cmt_count						Identifier: cmt_count
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: op_count						Identifier: op_count
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: key_count						Identifier: key_count
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: char_flag						Identifier: char_flag
Operator: =							Operator: =
Char: '\''							Char: '\''
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: str_flag						Identifier: str_flag
Operator: =							Operator: =
Char: '\"'							Char: '\"'
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: size						Identifier: size
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: =							Operator: =
Identifier: i							Identifier: i
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Line[%d] = %c\n"					String: "Line[%d] = %c\n"
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: set							Identifier: set
Identifier: values						Identifier: values
Identifier: to							Identifier: to
Numeric: 0							Numeric: 0
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Identifier: char_count						Identifier: char_count
Operator: =							Operator: =
Identifier: str_count						Identifier: str_count
Operator: =							Operator: =
Identifier: cmt_count						Identifier: cmt_count
Operator: =							Operator: =
Identifier: op_count						Identifier: op_count
Operator: =							Operator: =
Identifier: key_count						Identifier: key_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: keywords						Identifier: keywords
Identifier: result						Identifier: result
Operator: =							Operator: =
Identifier: iskey						Identifier: iskey
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: result						Identifier: result
Operator: [							Operator: [
Numeric: 0							Numeric: 0
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: z							Identifier: z
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: z							Identifier: z
Operator: <							Operator: <
Identifier: result						Identifier: result
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: z							Identifier: z
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: key							Identifier: key
Operator: [							Operator: [
Identifier: key_count						Identifier: key_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: key_count						Identifier: key_count
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: PrintKey						Identifier: PrintKey
Operator: (							Operator: (
Identifier: key							Identifier: key
Operator: ,							Operator: ,
Identifier: key_count						Identifier: key_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: key_count						Identifier: key_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Check						Identifier: Check
Keyword: if							Keyword: if
Identifier: its							Identifier: its
Numeric: a							Numeric: a
Identifier: char						Identifier: char
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: char_flag						Identifier: char_flag
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: do							Identifier: do
Operator: {							Operator: {
Keyword: character						Keyword: character
Operator: [							Operator: [
Identifier: char_count						Identifier: char_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: char_count						Identifier: char_count
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: !=							Operator: !=
Identifier: char_flag						Identifier: char_flag
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: char_flag						Identifier: char_flag
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: character						Keyword: character
Operator: [							Operator: [
Identifier: char_count						Identifier: char_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\''							Char: '\''
Operator: ;							Operator: ;
Identifier: char_count						Identifier: char_count
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: character						Keyword: character
Operator: [							Operator: [
Identifier: char_count						Identifier: char_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\''							Char: '\''
Operator: ;							Operator: ;
Identifier: PrintCharacter					Identifier: PrintCharacter
Operator: (							Operator: (
Keyword: character						Keyword: character
Operator: ,							Operator: ,
Identifier: char_count						Identifier: char_count
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: char_count						Identifier: char_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Keyword: character						Keyword: character
Operator: [							Operator: [
Identifier: char_count						Identifier: char_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Check						Identifier: Check
Keyword: if							Keyword: if
Identifier: its							Identifier: its
Numeric: a							Numeric: a
Identifier: string						Identifier: string
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: str_flag						Identifier: str_flag
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: do							Identifier: do
Operator: {							Operator: {
Identifier: string						Identifier: string
Operator: [							Operator: [
Identifier: str_count						Identifier: str_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: str_count						Identifier: str_count
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: !=							Operator: !=
Identifier: str_flag						Identifier: str_flag
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: string						Identifier: string
Operator: [							Operator: [
Identifier: str_count						Identifier: str_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\"'							Char: '\"'
Operator: ;							Operator: ;
Identifier: PrintString						Identifier: PrintString
Operator: (							Operator: (
Identifier: string						Identifier: string
Operator: ,							Operator: ,
Identifier: str_count						Identifier: str_count
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: str_count						Identifier: str_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: string						Identifier: string
Operator: [							Operator: [
Identifier: str_count						Identifier: str_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: single						Identifier: single
Identifier: comment						Identifier: comment
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: singlecomment					Identifier: singlecomment
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: do							Identifier: do
Operator: {							Operator: {
Identifier: comment						Identifier: comment
Operator: [							Operator: [
Identifier: cmt_count						Identifier: cmt_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: cmt_count						Identifier: cmt_count
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: while							Keyword: while
Operator: (							Operator: (
Token: !							Token: !
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '*'							Char: '*'
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '/'							Char: '/'
Operator: )							Operator: )
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: comment						Identifier: comment
Operator: [							Operator: [
Identifier: cmt_count						Identifier: cmt_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '*'							Char: '*'
Operator: ;							Operator: ;
Identifier: comment						Identifier: comment
Operator: [							Operator: [
Identifier: cmt_count						Identifier: cmt_count
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '/'							Char: '/'
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: =							Operator: =
Numeric: 2							Numeric: 2
Operator: ;							Operator: ;
Identifier: PrintComment					Identifier: PrintComment
Operator: (							Operator: (
Identifier: comment						Identifier: comment
Operator: ,							Operator: ,
Identifier: cmt_count						Identifier: cmt_count
Operator: +							Operator: +
Numeric: 2							Numeric: 2
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: cmt_count						Identifier: cmt_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: comment						Identifier: comment
Operator: [							Operator: [
Identifier: cmt_count						Identifier: cmt_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: operator						Identifier: operator
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isoperators						Identifier: isoperators
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: token						Identifier: token
Identifier: needs						Identifier: needs
Identifier: to							Identifier: to
Numeric: be							Numeric: be
Identifier: printed						Identifier: printed
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: tok_count						Identifier: tok_count
Operator: >							Operator: >
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: IsNumeric						Identifier: IsNumeric
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: PrintNumeric					Identifier: PrintNumeric
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: IsIdentifier					Identifier: IsIdentifier
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: PrintIdentifier					Identifier: PrintIdentifier
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Identifier: PrintToken						Identifier: PrintToken
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: special						Identifier: special
Identifier: cases						Identifier: cases
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isspecialop						Identifier: isspecialop
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isspecialop2					Identifier: isspecialop2
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: op_count						Identifier: op_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: op_count						Identifier: op_count
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: =							Operator: =
Numeric: 2							Numeric: 2
Operator: ;							Operator: ;
Identifier: PrintOperator					Identifier: PrintOperator
Operator: (							Operator: (
Identifier: operator						Identifier: operator
Operator: ,							Operator: ,
Numeric: 2							Numeric: 2
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: op_count						Identifier: op_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: op_count						Identifier: op_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: PrintOperator					Identifier: PrintOperator
Operator: (							Operator: (
Identifier: operator						Identifier: operator
Operator: ,							Operator: ,
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: op_count						Identifier: op_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: its							Identifier: its
Identifier: single						Identifier: single
Keyword: or							Keyword: or
Identifier: double						Identifier: double
Identifier: operator						Identifier: operator
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '.'							Char: '.'
Operator: |							Operator: |
Operator: |							Operator: |
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '!'							Char: '!'
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: op_count						Identifier: op_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: op_count						Identifier: op_count
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: PrintOperator					Identifier: PrintOperator
Operator: (							Operator: (
Identifier: operator						Identifier: operator
Operator: ,							Operator: ,
Numeric: 2							Numeric: 2
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: op_count						Identifier: op_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: =							Operator: =
Numeric: 2							Numeric: 2
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Identifier: operator						Identifier: operator
Operator: [							Operator: [
Identifier: op_count						Identifier: op_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: PrintOperator					Identifier: PrintOperator
Operator: (							Operator: (
Identifier: operator						Identifier: operator
Operator: ,							Operator: ,
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: op_count						Identifier: op_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: It							Identifier: It
Keyword: is							Keyword: is
Numeric: a							Numeric: a
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: numeric						Identifier: numeric
Operator: ,							Operator: ,
Keyword: or							Keyword: or
Identifier: identifier						Identifier: identifier
Keyword: and							Keyword: and
Identifier: print						Identifier: print
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isend						Identifier: isend
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: IsNumeric						Identifier: IsNumeric
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: PrintNumeric					Identifier: PrintNumeric
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: IsIdentifier					Identifier: IsIdentifier
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: PrintIdentifier					Identifier: PrintIdentifier
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Identifier: PrintToken						Identifier: PrintToken
Operator: (							Operator: (
Identifier: token						Identifier: token
Operator: ,							Operator: ,
Identifier: tok_count						Identifier: tok_count
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: identifier						Identifier: identifier
Identifier: token						Identifier: token
Operator: [							Operator: [
Identifier: tok_count						Identifier: tok_count
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: tok_count						Identifier: tok_count
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: build						Identifier: build
Identifier: multiple						Identifier: multiple
Identifier: line						Identifier: line
Identifier: comment						Identifier: comment
Keyword: bool							Keyword: bool
Identifier: BuildComment					Identifier: BuildComment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: cmt							Identifier: cmt
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: complete						Identifier: complete
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Start: %d\tEnd: %d\n"					String: "Start: %d\tEnd: %d\n"
Operator: ,							Operator: ,
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: do							Identifier: do
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: cmt							Identifier: cmt
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '*'							Char: '*'
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: cmt							Identifier: cmt
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '/'							Char: '/'
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: complete						Identifier: complete
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: start						Identifier: start
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: start						Identifier: start
Operator: >							Operator: >
Keyword: end							Keyword: end
Operator: )							Operator: )
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: cmt							Identifier: cmt
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: ]							Operator: ]
Operator: !=							Operator: !=
Char: '\n'							Char: '\n'
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: complete						Identifier: complete
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: token						Identifier: token
Identifier: void						Identifier: void
Identifier: PrintToken						Identifier: PrintToken
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: tok							Identifier: tok
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: tok							Identifier: tok
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Token: %s\n"						String: "Token: %s\n"
Operator: ,							Operator: ,
Identifier: tok							Identifier: tok
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: char						Identifier: char
Identifier: void						Identifier: void
Identifier: PrintCharacter					Identifier: PrintCharacter
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: chars						Identifier: chars
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: chars						Identifier: chars
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Char: %s\n"						String: "Char: %s\n"
Operator: ,							Operator: ,
Identifier: chars						Identifier: chars
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: string						Identifier: string
Identifier: void						Identifier: void
Identifier: PrintString						Identifier: PrintString
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: str							Identifier: str
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: str							Identifier: str
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "String: %s\n"						String: "String: %s\n"
Operator: ,							Operator: ,
Identifier: str							Identifier: str
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: single						Identifier: single
Identifier: comment						Identifier: comment
Identifier: void						Identifier: void
Identifier: PrintComment					Identifier: PrintComment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: cmt							Identifier: cmt
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: cmt							Identifier: cmt
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Comment: %s\n"						String: "Comment: %s\n"
Operator: ,							Operator: ,
Identifier: cmt							Identifier: cmt
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: single						Identifier: single
Identifier: comment						Identifier: comment
Identifier: void						Identifier: void
Identifier: PrintOperator					Identifier: PrintOperator
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: op							Identifier: op
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: op							Identifier: op
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Operator: %s\n"					String: "Operator: %s\n"
Operator: ,							Operator: ,
Identifier: op							Identifier: op
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: keyword						Identifier: keyword
Identifier: void						Identifier: void
Identifier: PrintKey						Identifier: PrintKey
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key							Identifier: key
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: key							Identifier: key
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Keyword: %s\n"						String: "Keyword: %s\n"
Operator: ,							Operator: ,
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: numeric						Identifier: numeric
Identifier: void						Identifier: void
Identifier: PrintNumeric					Identifier: PrintNumeric
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: num							Identifier: num
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: num							Identifier: num
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Numeric: %s\n"						String: "Numeric: %s\n"
Operator: ,							Operator: ,
Identifier: num							Identifier: num
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: print						Identifier: print
Identifier: off							Identifier: off
Identifier: identifier						Identifier: identifier
Identifier: void						Identifier: void
Identifier: PrintIdentifier					Identifier: PrintIdentifier
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: id							Identifier: id
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: !=							Operator: !=
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: id							Identifier: id
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Identifier: %s\n"					String: "Identifier: %s\n"
Operator: ,							Operator: ,
Identifier: id							Identifier: id
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: find						Identifier: find
Identifier: single						Identifier: single
Identifier: comment						Identifier: comment
Keyword: bool							Keyword: bool
Identifier: singlecomment					Identifier: singlecomment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '/'							Char: '/'
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '*'							Char: '*'
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Identifier: start						Identifier: start
Operator: +							Operator: +
Numeric: 2							Numeric: 2
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Keyword: end							Keyword: end
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '*'							Char: '*'
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '/'							Char: '/'
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: find						Identifier: find
Identifier: multiple						Identifier: multiple
Identifier: line						Identifier: line
Identifier: comment						Identifier: comment
Keyword: bool							Keyword: bool
Identifier: mltcomment						Identifier: mltcomment
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Identifier: start						Identifier: start
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Keyword: end							Keyword: end
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '/'							Char: '/'
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: +							Operator: +
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '*'							Char: '*'
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: singlecomment					Identifier: singlecomment
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Keyword: else							Keyword: else
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Keyword: character						Keyword: character
Keyword: is							Keyword: is
Numeric: a							Numeric: a
Identifier: digit						Identifier: digit
Keyword: or							Keyword: or
Identifier: alphabetic						Identifier: alphabetic
Keyword: bool							Keyword: bool
Identifier: isalphabet						Identifier: isalphabet
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Operator: (							Operator: (
Identifier: isalpha						Identifier: isalpha
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: |							Operator: |
Operator: |							Operator: |
Identifier: isdigit						Identifier: isdigit
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: |							Operator: |
Operator: |							Operator: |
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '_'							Char: '_'
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Keyword: character						Keyword: character
Keyword: is							Keyword: is
Numeric: a							Numeric: a
Identifier: non							Identifier: non
Identifier: operator						Identifier: operator
Identifier: symbol						Identifier: symbol
Keyword: bool							Keyword: bool
Identifier: issymbol						Identifier: issymbol
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '?'							Char: '?'
Operator: |							Operator: |
Operator: |							Operator: |
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '~'							Char: '~'
Operator: |							Operator: |
Operator: |							Operator: |
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '^'							Char: '^'
Operator: |							Operator: |
Operator: |							Operator: |
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '#'							Char: '#'
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: at							Identifier: at
Keyword: end							Keyword: end
Keyword: of							Keyword: of
Identifier: token						Identifier: token
Keyword: bool							Keyword: bool
Identifier: isend						Identifier: isend
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '\n'							Char: '\n'
Operator: |							Operator: |
Operator: |							Operator: |
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Char: '\t'							Char: '\t'
Operator: |							Operator: |
Operator: |							Operator: |
Identifier: isspace						Identifier: isspace
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: |							Operator: |
Operator: |							Operator: |
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: EOF							Identifier: EOF
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Keyword: character						Keyword: character
Keyword: is							Keyword: is
Identifier: operator						Identifier: operator
Keyword: bool							Keyword: bool
Identifier: isoperator						Identifier: isoperator
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: char						Identifier: char
Identifier: ops							Identifier: ops
Operator: [							Operator: [
Numeric: 20							Numeric: 20
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
Char: '<'							Char: '<'
Operator: ,							Operator: ,
Char: '>'							Char: '>'
Operator: ,							Operator: ,
Char: '('							Char: '('
Operator: ,							Operator: ,
Char: ')'							Char: ')'
Operator: ,							Operator: ,
Char: '+'							Char: '+'
Operator: ,							Operator: ,
Char: '-'							Char: '-'
Operator: ,							Operator: ,
Char: '*'							Char: '*'
Operator: ,							Operator: ,
Char: '/'							Char: '/'
Operator: ,							Operator: ,
Char: '|'							Char: '|'
Operator: ,							Operator: ,
Char: '&'							Char: '&'
Operator: ,							Operator: ,
Char: ';'							Char: ';'
Operator: ,							Operator: ,
Char: ','							Char: ','
Operator: ,							Operator: ,
Char: ':'							Char: ':'
Operator: ,							Operator: ,
Char: '='							Char: '='
Operator: ,							Operator: ,
Char: '$'							Char: '$'
Operator: ,							Operator: ,
Char: '@'							Char: '@'
Operator: ,							Operator: ,
Char: '['							Char: '['
Operator: ,							Operator: ,
Char: ']'							Char: ']'
Operator: ,							Operator: ,
Char: '{'							Char: '{'
Operator: ,							Operator: ,
Char: '}'							Char: '}'
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Numeric: 20							Numeric: 20
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: ops							Identifier: ops
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Keyword: character						Keyword: character
Keyword: is							Keyword: is
Identifier: operator						Identifier: operator
Keyword: bool							Keyword: bool
Identifier: isoperators						Identifier: isoperators
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Numeric: d							Numeric: d
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: char						Identifier: char
Identifier: ops							Identifier: ops
Operator: [							Operator: [
Numeric: 21							Numeric: 21
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
Char: '<'							Char: '<'
Operator: ,							Operator: ,
Char: '>'							Char: '>'
Operator: ,							Operator: ,
Char: '('							Char: '('
Operator: ,							Operator: ,
Char: ')'							Char: ')'
Operator: ,							Operator: ,
Char: '+'							Char: '+'
Operator: ,							Operator: ,
Char: '-'							Char: '-'
Operator: ,							Operator: ,
Char: '*'							Char: '*'
Operator: ,							Operator: ,
Char: '/'							Char: '/'
Operator: ,							Operator: ,
Char: '|'							Char: '|'
Operator: ,							Operator: ,
Char: '&'							Char: '&'
Operator: ,							Operator: ,
Char: ';'							Char: ';'
Operator: ,							Operator: ,
Char: ','							Char: ','
Operator: ,							Operator: ,
Char: ':'							Char: ':'
Operator: ,							Operator: ,
Char: '='							Char: '='
Operator: ,							Operator: ,
Char: '$'							Char: '$'
Operator: ,							Operator: ,
Char: '@'							Char: '@'
Operator: ,							Operator: ,
Char: '['							Char: '['
Operator: ,							Operator: ,
Char: ']'							Char: ']'
Operator: ,							Operator: ,
Char: '{'							Char: '{'
Operator: ,							Operator: ,
Char: '}'							Char: '}'
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: ops2						Identifier: ops2
Operator: [							Operator: [
Numeric: 2							Numeric: 2
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: ".."							String: ".."
Operator: ,							Operator: ,
String: "!="							String: "!="
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: z							Identifier: z
Operator: ;							Operator: ;
Identifier: z							Identifier: z
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Numeric: 21							Numeric: 21
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: ops							Identifier: ops
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: ops2						Identifier: ops2
Operator: [							Operator: [
Identifier: z							Identifier: z
Operator: ]							Operator: ]
Operator: [							Operator: [
Numeric: 0							Numeric: 0
Operator: ]							Operator: ]
Operator: &							Operator: &
Operator: &							Operator: &
Numeric: d							Numeric: d
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: ops2						Identifier: ops2
Operator: [							Operator: [
Identifier: z							Identifier: z
Operator: ]							Operator: ]
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: z							Identifier: z
Operator: <							Operator: <
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Identifier: z							Identifier: z
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Keyword: character						Keyword: character
Keyword: is							Keyword: is
Identifier: special						Identifier: special
Identifier: operator						Identifier: operator
Keyword: bool							Keyword: bool
Identifier: isspecialop						Identifier: isspecialop
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: char						Identifier: char
Identifier: special						Identifier: special
Operator: [							Operator: [
Numeric: 7							Numeric: 7
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
Char: '<'							Char: '<'
Operator: ,							Operator: ,
Char: '>'							Char: '>'
Operator: ,							Operator: ,
Char: '{'							Char: '{'
Operator: ,							Operator: ,
Char: '}'							Char: '}'
Operator: ,							Operator: ,
Char: '*'							Char: '*'
Operator: ,							Operator: ,
Char: ':'							Char: ':'
Operator: ,							Operator: ,
Char: '='							Char: '='
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Numeric: 7							Numeric: 7
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: special						Identifier: special
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: its							Identifier: its
Numeric: 2							Numeric: 2
Keyword: character						Keyword: character
Identifier: operator						Identifier: operator
Keyword: bool							Keyword: bool
Identifier: isspecialop2					Identifier: isspecialop2
Operator: (							Operator: (
Identifier: char						Identifier: char
Numeric: c							Numeric: c
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Numeric: d							Numeric: d
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: special						Identifier: special
Operator: [							Operator: [
Numeric: 10							Numeric: 10
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "**"							String: "**"
Operator: ,							Operator: ,
String: ":="							String: ":="
Operator: ,							Operator: ,
String: "<<"							String: "<<"
Operator: ,							Operator: ,
String: ">>"							String: ">>"
Operator: ,							Operator: ,
String: "<>"							String: "<>"
Operator: ,							Operator: ,
String: "<="							String: "<="
Operator: ,							Operator: ,
String: ">="							String: ">="
Operator: ,							Operator: ,
String: "=>"							String: "=>"
Operator: ,							Operator: ,
String: "{:"							String: "{:"
Operator: ,							Operator: ,
String: "}:"							String: "}:"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Numeric: 10							Numeric: 10
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Numeric: c							Numeric: c
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: special						Identifier: special
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: [							Operator: [
Numeric: 0							Numeric: 0
Operator: ]							Operator: ]
Operator: &							Operator: &
Operator: &							Operator: &
Numeric: d							Numeric: d
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: special						Identifier: special
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: )							Operator: )
Identifier: return						Identifier: return
Identifier: true						Identifier: true
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: false						Identifier: false
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: key							Identifier: key
Identifier: word						Identifier: word
Keyword: is							Keyword: is
Identifier: found						Identifier: found
Identifier: int							Identifier: int
Operator: *							Operator: *
Identifier: iskey						Identifier: iskey
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_2						Identifier: key_2
Operator: [							Operator: [
Numeric: 5							Numeric: 5
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "if"							String: "if"
Operator: ,							Operator: ,
String: "in"							String: "in"
Operator: ,							Operator: ,
String: "is"							String: "is"
Operator: ,							Operator: ,
String: "of"							String: "of"
Operator: ,							Operator: ,
String: "or"							String: "or"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_3						Identifier: key_3
Operator: [							Operator: [
Numeric: 6							Numeric: 6
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "and"							String: "and"
Operator: ,							Operator: ,
String: "end"							String: "end"
Operator: ,							Operator: ,
String: "ifc"							String: "ifc"
Operator: ,							Operator: ,
String: "out"							String: "out"
Operator: ,							Operator: ,
String: "pkg"							String: "pkg"
Operator: ,							Operator: ,
String: "ptr"							String: "ptr"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_4						Identifier: key_4
Operator: [							Operator: [
Numeric: 10							Numeric: 10
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "bool"							String: "bool"
Operator: ,							Operator: ,
String: "case"							String: "case"
Operator: ,							Operator: ,
String: "else"							String: "else"
Operator: ,							Operator: ,
String: "exit"							String: "exit"
Operator: ,							Operator: ,
String: "func"							String: "func"
Operator: ,							Operator: ,
String: "null"							String: "null"
Operator: ,							Operator: ,
String: "proc"							String: "proc"
Operator: ,							Operator: ,
String: "then"							String: "then"
Operator: ,							Operator: ,
String: "type"							String: "type"
Operator: ,							Operator: ,
String: "when"							String: "when"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_5						Identifier: key_5
Operator: [							Operator: [
Numeric: 5							Numeric: 5
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "array"							String: "array"
Operator: ,							Operator: ,
String: "elsif"							String: "elsif"
Operator: ,							Operator: ,
String: "float"							String: "float"
Operator: ,							Operator: ,
String: "range"							String: "range"
Operator: ,							Operator: ,
String: "while"							String: "while"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_6						Identifier: key_6
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "others"						String: "others"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_7						Identifier: key_7
Operator: [							Operator: [
Numeric: 4							Numeric: 4
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "integer"						String: "integer"
Operator: ,							Operator: ,
String: "mutator"						String: "mutator"
Operator: ,							Operator: ,
String: "natural"						String: "natural"
Operator: ,							Operator: ,
String: "subtype"						String: "subtype"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_8						Identifier: key_8
Operator: [							Operator: [
Numeric: 3							Numeric: 3
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "accessor"						String: "accessor"
Operator: ,							Operator: ,
String: "constant"						String: "constant"
Operator: ,							Operator: ,
String: "positive"						String: "positive"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: key_9						Identifier: key_9
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
String: "character"						String: "character"
Operator: }							Operator: }
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: check						Identifier: check
Operator: [							Operator: [
Numeric: 10							Numeric: 10
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: static						Identifier: static
Identifier: int							Identifier: int
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 2							Numeric: 2
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: {							Operator: {
Numeric: 0							Numeric: 0
Operator: ,							Operator: ,
Numeric: 0							Numeric: 0
Operator: }							Operator: }
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 0							Numeric: 0
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: word						Identifier: word
Identifier: found						Identifier: found
Operator: (							Operator: (
Numeric: 0							Numeric: 0
Keyword: or							Keyword: or
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: size						Identifier: size
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: ,							Operator: ,
Identifier: t1							Identifier: t1
Operator: ,							Operator: ,
Identifier: t2							Identifier: t2
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: p							Identifier: p
Operator: ;							Operator: ;
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: size						Identifier: size
Operator: =							Operator: =
Numeric: 9							Numeric: 9
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Numeric: Add							Numeric: Add
Identifier: arrays						Identifier: arrays
Identifier: to							Identifier: to
Numeric: a							Numeric: a
Identifier: linked						Identifier: linked
Identifier: list						Identifier: list
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 5							Numeric: 5
Operator: ,							Operator: ,
Identifier: key_2						Identifier: key_2
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 6							Numeric: 6
Operator: ,							Operator: ,
Identifier: key_3						Identifier: key_3
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 10							Numeric: 10
Operator: ,							Operator: ,
Identifier: key_4						Identifier: key_4
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 5							Numeric: 5
Operator: ,							Operator: ,
Identifier: key_5						Identifier: key_5
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 1							Numeric: 1
Operator: ,							Operator: ,
Identifier: key_6						Identifier: key_6
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 4							Numeric: 4
Operator: ,							Operator: ,
Identifier: key_7						Identifier: key_7
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 3							Numeric: 3
Operator: ,							Operator: ,
Identifier: key_8						Identifier: key_8
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Numeric: 1							Numeric: 1
Operator: ,							Operator: ,
Identifier: key_9						Identifier: key_9
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Original List: \n"					String: "Original List: \n"
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: PrintList						Identifier: PrintList
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: size						Identifier: size
Operator: =							Operator: =
Numeric: 9							Numeric: 9
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: words						Identifier: words
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: p							Identifier: p
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Identifier: p							Identifier: p
Operator: !=							Operator: !=
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Identifier: p							Identifier: p
Operator: =							Operator: =
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: size						Identifier: size
Operator: <=							Operator: <=
Keyword: end							Keyword: end
Operator: -							Operator: -
Identifier: start						Identifier: start
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: cutstring						Identifier: cutstring
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: ,							Operator: ,
Identifier: check						Identifier: check
Operator: ,							Operator: ,
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: size						Identifier: size
Operator: +							Operator: +
Identifier: start						Identifier: start
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: strncmp						Identifier: strncmp
Operator: (							Operator: (
Operator: (							Operator: (
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: words						Identifier: words
Operator: )							Operator: )
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: check						Identifier: check
Operator: ,							Operator: ,
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: at							Identifier: at
Identifier: beginning						Identifier: beginning
Keyword: of							Keyword: of
Identifier: line						Identifier: line
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: start						Identifier: start
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: other						Identifier: other
Identifier: conditions						Identifier: conditions
Identifier: before						Identifier: before
Identifier: switch						Identifier: switch
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: -							Operator: -
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: case							Keyword: case
Char: ' '							Char: ' '
Operator: :							Operator: :
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Keyword: case							Keyword: case
Char: '\n'							Char: '\n'
Operator: :							Operator: :
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Keyword: case							Keyword: case
Char: '\t'							Char: '\t'
Operator: :							Operator: :
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isoperator						Identifier: isoperator
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: -							Operator: -
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Identifier: for							Identifier: for
Identifier: other						Identifier: other
Identifier: conditions						Identifier: conditions
Identifier: after						Identifier: after
Identifier: switch						Identifier: switch
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: size						Identifier: size
Operator: +							Operator: +
Identifier: start						Identifier: start
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: case							Keyword: case
Char: ' '							Char: ' '
Operator: :							Operator: :
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Keyword: case							Keyword: case
Char: '\n'							Char: '\n'
Operator: :							Operator: :
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Keyword: case							Keyword: case
Char: '\t'							Char: '\t'
Operator: :							Operator: :
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: break						Identifier: break
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: if							Keyword: if
Operator: (							Operator: (
Keyword: end							Keyword: end
Operator: =							Operator: =
Operator: =							Operator: =
Operator: (							Operator: (
Identifier: start						Identifier: start
Operator: +							Operator: +
Identifier: size						Identifier: size
Operator: +							Operator: +
Numeric: 2							Numeric: 2
Operator: )							Operator: )
Operator: )							Operator: )
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isoperator						Identifier: isoperator
Operator: (							Operator: (
Identifier: line						Identifier: line
Operator: [							Operator: [
Identifier: start						Identifier: start
Operator: +							Operator: +
Identifier: size						Identifier: size
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 0							Numeric: 0
Operator: ]							Operator: ]
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: size						Identifier: size
Operator: ;							Operator: ;
Identifier: return						Identifier: return
Identifier: val							Identifier: val
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Identifier: t1							Identifier: t1
Operator: =							Operator: =
Identifier: t2							Identifier: t2
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Identifier: size						Identifier: size
Operator: -							Operator: -
Operator: -							Operator: -
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: DeleteList						Identifier: DeleteList
Operator: (							Operator: (
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Keyword: end							Keyword: end
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 0							Numeric: 0
Operator: ]							Operator: ]
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: val							Identifier: val
Operator: [							Operator: [
Numeric: 1							Numeric: 1
Operator: ]							Operator: ]
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: return						Identifier: return
Identifier: val							Identifier: val
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: cut							Identifier: cut
Identifier: string						Identifier: string
Identifier: at							Identifier: at
Identifier: certain						Identifier: certain
Identifier: point						Identifier: point
Keyword: and							Keyword: and
Identifier: copy						Identifier: copy
Identifier: to							Identifier: to
Identifier: new							Identifier: new
Identifier: string						Identifier: string
Identifier: void						Identifier: void
Identifier: cutstring						Identifier: cutstring
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: original						Identifier: original
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: after						Identifier: after
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: start						Identifier: start
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Keyword: end							Keyword: end
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: j							Identifier: j
Operator: ;							Operator: ;
Identifier: j							Identifier: j
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Identifier: start						Identifier: start
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Keyword: end							Keyword: end
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: after						Identifier: after
Operator: [							Operator: [
Identifier: j							Identifier: j
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: original						Identifier: original
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: j							Identifier: j
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: after						Identifier: after
Operator: [							Operator: [
Identifier: j							Identifier: j
Operator: ]							Operator: ]
Operator: =							Operator: =
Char: '\0'							Char: '\0'
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: string						Identifier: string
Keyword: is							Keyword: is
Identifier: numeric						Identifier: numeric
Keyword: bool							Keyword: bool
Identifier: IsNumeric						Identifier: IsNumeric
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: num							Identifier: num
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: special						Identifier: special
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: j							Identifier: j
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Char: '.'							Char: '.'
Identifier: char						Identifier: char
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Numeric: 24							Numeric: 24
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: special						Identifier: special
Operator: =							Operator: =
Identifier: j							Identifier: j
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: Copy						Identifier: Copy
Operator: (							Operator: (
Identifier: num							Identifier: num
Operator: ,							Operator: ,
Identifier: copy						Identifier: copy
Operator: ,							Operator: ,
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: size						Identifier: size
Operator: ;							Operator: ;
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isxdigit						Identifier: isxdigit
Operator: (							Operator: (
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Identifier: j							Identifier: j
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '.'							Char: '.'
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: special						Identifier: special
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: j							Identifier: j
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Identifier: special						Identifier: special
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "this is i= %d, this is j= %d\n"			String: "this is i= %d, this is j= %d\n"
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: j							Identifier: j
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: return						Identifier: return
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: j							Identifier: j
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: string						Identifier: string
Keyword: is							Keyword: is
Identifier: an							Identifier: an
Identifier: identifier						Identifier: identifier
Keyword: bool							Keyword: bool
Identifier: IsIdentifier					Identifier: IsIdentifier
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: id							Identifier: id
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: j							Identifier: j
Operator: ,							Operator: ,
Identifier: first						Identifier: first
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Numeric: 24							Numeric: 24
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: j							Identifier: j
Operator: =							Operator: =
Identifier: first						Identifier: first
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: Copy						Identifier: Copy
Operator: (							Operator: (
Identifier: id							Identifier: id
Operator: ,							Operator: ,
Identifier: copy						Identifier: copy
Operator: ,							Operator: ,
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: size						Identifier: size
Operator: ;							Operator: ;
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isalpha						Identifier: isalpha
Operator: (							Operator: (
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: first						Identifier: first
Operator: =							Operator: =
Numeric: 1							Numeric: 1
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: j							Identifier: j
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: isdigit						Identifier: isdigit
Operator: (							Operator: (
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: j							Identifier: j
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: copy						Identifier: copy
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Operator: =							Operator: =
Char: '_'							Char: '_'
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: j							Identifier: j
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "this is i= %d, this is j= %d\n"			String: "this is i= %d, this is j= %d\n"
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: j							Identifier: j
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: return						Identifier: return
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: j							Identifier: j
Operator: &							Operator: &
Operator: &							Operator: &
Identifier: first						Identifier: first
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: copy						Identifier: copy
Identifier: string						Identifier: string
Identifier: to							Identifier: to
Identifier: another						Identifier: another
Identifier: string						Identifier: string
Identifier: void						Identifier: void
Identifier: Copy						Identifier: Copy
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Numeric: a							Numeric: a
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Numeric: b							Numeric: b
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: size						Identifier: size
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Numeric: b							Numeric: b
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Numeric: a							Numeric: a
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: Function						Identifier: Function
Identifier: to							Identifier: to
Identifier: copy						Identifier: copy
Identifier: one							Identifier: one
Keyword: array							Keyword: array
Identifier: into						Identifier: into
Identifier: another						Identifier: another
Identifier: void						Identifier: void
Identifier: CopyArray						Identifier: CopyArray
Operator: (							Operator: (
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: arr1						Identifier: arr1
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: arr2						Identifier: arr2
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: ,							Operator: ,
Identifier: int							Identifier: int
Identifier: size						Identifier: size
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: size						Identifier: size
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: arr2						Identifier: arr2
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: =							Operator: =
Identifier: arr1						Identifier: arr1
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "arr1[%d] = %s\n"					String: "arr1[%d] = %s\n"
Operator: ,							Operator: ,
Identifier: i							Identifier: i
Operator: ,							Operator: ,
Identifier: arr1						Identifier: arr1
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: print						Identifier: print
Identifier: list						Identifier: list
Identifier: void						Identifier: void
Identifier: PrintList						Identifier: PrintList
Operator: (							Operator: (
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: NodePtr						Identifier: NodePtr
Identifier: p							Identifier: p
Operator: ;							Operator: ;
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: tmp							Identifier: tmp
Operator: [							Operator: [
Identifier: MAXWORD						Identifier: MAXWORD
Operator: ]							Operator: ]
Operator: ;							Operator: ;
Identifier: int							Identifier: int
Identifier: i							Identifier: i
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: p							Identifier: p
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: p							Identifier: p
Operator: !=							Operator: !=
Identifier: NULL						Identifier: NULL
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: CopyArray						Identifier: CopyArray
Operator: (							Operator: (
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: words						Identifier: words
Operator: ,							Operator: ,
Identifier: tmp							Identifier: tmp
Operator: ,							Operator: ,
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "Key-%d, Words: "					String: "Key-%d, Words: "
Operator: ,							Operator: ,
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: ;							Operator: ;
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: i							Identifier: i
Operator: <							Operator: <
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "%s "							String: "%s "
Operator: ,							Operator: ,
Identifier: tmp							Identifier: tmp
Operator: [							Operator: [
Identifier: i							Identifier: i
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: i							Identifier: i
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: i							Identifier: i
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: printf						Identifier: printf
Operator: (							Operator: (
String: "\n"							String: "\n"
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: p							Identifier: p
Operator: =							Operator: =
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Numeric: add							Numeric: add
Identifier: node						Identifier: node
Identifier: to							Identifier: to
Identifier: front						Identifier: front
Keyword: of							Keyword: of
Identifier: list						Identifier: list
Identifier: void						Identifier: void
Identifier: AddNode						Identifier: AddNode
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: ,							Operator: ,
Identifier: char						Identifier: char
Operator: *							Operator: *
Identifier: data						Identifier: data
Operator: [							Operator: [
Operator: ]							Operator: ]
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: allocate						Identifier: allocate
Identifier: NodePtr						Identifier: NodePtr
Identifier: p							Identifier: p
Operator: =							Operator: =
Operator: (							Operator: (
Identifier: NodePtr						Identifier: NodePtr
Operator: )							Operator: )
Identifier: malloc						Identifier: malloc
Operator: (							Operator: (
Identifier: sizeof						Identifier: sizeof
Operator: (							Operator: (
Identifier: struct						Identifier: struct
Identifier: Node						Identifier: Node
Operator: )							Operator: )
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: intialize						Identifier: intialize
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: =							Operator: =
Identifier: key							Identifier: key
Operator: ;							Operator: ;
Identifier: CopyArray						Identifier: CopyArray
Operator: (							Operator: (
Identifier: data						Identifier: data
Operator: ,							Operator: ,
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: words						Identifier: words
Operator: ,							Operator: ,
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: point						Identifier: point
Identifier: to							Identifier: to
Identifier: old							Identifier: old
Identifier: head						Identifier: head
Identifier: p							Identifier: p
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: make						Identifier: make
Identifier: p							Identifier: p
Identifier: new							Identifier: new
Identifier: head						Identifier: head
Identifier: head						Identifier: head
Operator: =							Operator: =
Identifier: p							Identifier: p
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: delete						Identifier: delete
Identifier: first						Identifier: first
Identifier: node						Identifier: node
Identifier: NodePtr						Identifier: NodePtr
Identifier: DeleteNode						Identifier: DeleteNode
Operator: (							Operator: (
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: save						Identifier: save
Identifier: head						Identifier: head
Identifier: node						Identifier: node
Identifier: NodePtr						Identifier: NodePtr
Identifier: temp						Identifier: temp
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: set							Identifier: set
Identifier: head						Identifier: head
Identifier: to							Identifier: to
Identifier: next						Identifier: next
Identifier: node						Identifier: node
Identifier: head						Identifier: head
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: return						Identifier: return
Identifier: removed						Identifier: removed
Identifier: node						Identifier: node
Identifier: return						Identifier: return
Identifier: temp						Identifier: temp
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: delete						Identifier: delete
Identifier: list						Identifier: list
Identifier: void						Identifier: void
Identifier: DeleteList						Identifier: DeleteList
Operator: (							Operator: (
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: NodePtr						Identifier: NodePtr
Identifier: tmp							Identifier: tmp
Operator: ;							Operator: ;
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: head						Identifier: head
Operator: !=							Operator: !=
Identifier: NULL						Identifier: NULL
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: tmp							Identifier: tmp
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Identifier: free						Identifier: free
Operator: (							Operator: (
Identifier: head						Identifier: head
Operator: )							Operator: )
Operator: ;							Operator: ;
Identifier: head						Identifier: head
Operator: =							Operator: =
Identifier: tmp							Identifier: tmp
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: head						Identifier: head
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: check						Identifier: check
Keyword: if							Keyword: if
Identifier: list						Identifier: list
Keyword: is							Keyword: is
Identifier: empty						Identifier: empty
Keyword: bool							Keyword: bool
Identifier: isempty						Identifier: isempty
Operator: (							Operator: (
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: head						Identifier: head
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: find						Identifier: find
Identifier: length						Identifier: length
Keyword: of							Keyword: of
Identifier: list						Identifier: list
Identifier: int							Identifier: int
Identifier: Length						Identifier: Length
Operator: (							Operator: (
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: int							Identifier: int
Identifier: length						Identifier: length
Operator: =							Operator: =
Numeric: 0							Numeric: 0
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: current						Identifier: current
Operator: ;							Operator: ;
Identifier: for							Identifier: for
Operator: (							Operator: (
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Identifier: current						Identifier: current
Operator: !=							Operator: !=
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: length						Identifier: length
Operator: +							Operator: +
Operator: +							Operator: +
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: length						Identifier: length
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: find						Identifier: find
Identifier: node						Identifier: node
Identifier: with						Identifier: with
Identifier: key							Identifier: key
Identifier: NodePtr						Identifier: NodePtr
Identifier: FindKey						Identifier: FindKey
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: start						Identifier: start
Identifier: from						Identifier: from
Identifier: the							Identifier: the
Identifier: first						Identifier: first
Identifier: link						Identifier: link
Identifier: NodePtr						Identifier: NodePtr
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Keyword: if							Keyword: if
Identifier: list						Identifier: list
Keyword: is							Keyword: is
Identifier: empty						Identifier: empty
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: head						Identifier: head
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: navigate						Identifier: navigate
Identifier: through						Identifier: through
Identifier: list						Identifier: list
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: !=							Operator: !=
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Keyword: if							Keyword: if
Identifier: it							Identifier: it
Keyword: is							Keyword: is
Identifier: last						Identifier: last
Identifier: node						Identifier: node
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: go							Identifier: go
Identifier: to							Identifier: to
Identifier: next						Identifier: next
Identifier: link						Identifier: link
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Keyword: if							Keyword: if
Identifier: data						Identifier: data
Identifier: found						Identifier: found
Operator: ,							Operator: ,
Identifier: return						Identifier: return
Identifier: the							Identifier: the
Identifier: current						Identifier: current
Identifier: Link						Identifier: Link
Identifier: return						Identifier: return
Identifier: current						Identifier: current
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: delete						Identifier: delete
Numeric: a							Numeric: a
Identifier: node						Identifier: node
Identifier: with						Identifier: with
Identifier: key							Identifier: key
Identifier: NodePtr						Identifier: NodePtr
Identifier: DeleteKey						Identifier: DeleteKey
Operator: (							Operator: (
Identifier: int							Identifier: int
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: start						Identifier: start
Identifier: from						Identifier: from
Identifier: the							Identifier: the
Identifier: first						Identifier: first
Identifier: link						Identifier: link
Identifier: NodePtr						Identifier: NodePtr
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: ;							Operator: ;
Identifier: NodePtr						Identifier: NodePtr
Identifier: previous						Identifier: previous
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Keyword: if							Keyword: if
Identifier: list						Identifier: list
Keyword: is							Keyword: is
Identifier: empty						Identifier: empty
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: head						Identifier: head
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: navigate						Identifier: navigate
Identifier: through						Identifier: through
Identifier: list						Identifier: list
Keyword: while							Keyword: while
Operator: (							Operator: (
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: key							Identifier: key
Operator: !=							Operator: !=
Identifier: key							Identifier: key
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Keyword: if							Keyword: if
Identifier: it							Identifier: it
Keyword: is							Keyword: is
Identifier: last						Identifier: last
Identifier: node						Identifier: node
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: NULL						Identifier: NULL
Operator: )							Operator: )
Operator: {							Operator: {
Identifier: return						Identifier: return
Identifier: NULL						Identifier: NULL
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: store						Identifier: store
Identifier: reference						Identifier: reference
Identifier: to							Identifier: to
Identifier: current						Identifier: current
Identifier: link						Identifier: link
Identifier: previous						Identifier: previous
Operator: =							Operator: =
Identifier: current						Identifier: current
Operator: ;							Operator: ;
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: move						Identifier: move
Identifier: to							Identifier: to
Identifier: next						Identifier: next
Identifier: link						Identifier: link
Identifier: current						Identifier: current
Operator: =							Operator: =
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: }							Operator: }
Operator: }							Operator: }
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: found						Identifier: found
Numeric: a							Numeric: a
Identifier: match						Identifier: match
Operator: ,							Operator: ,
Identifier: update						Identifier: update
Identifier: the							Identifier: the
Identifier: link						Identifier: link
Keyword: if							Keyword: if
Operator: (							Operator: (
Identifier: current						Identifier: current
Operator: =							Operator: =
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: )							Operator: )
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: change						Identifier: change
Identifier: first						Identifier: first
Identifier: to							Identifier: to
Identifier: point						Identifier: point
Identifier: to							Identifier: to
Identifier: next						Identifier: next
Identifier: link						Identifier: link
Identifier: head						Identifier: head
Operator: =							Operator: =
Identifier: head						Identifier: head
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: }							Operator: }
Keyword: else							Keyword: else
Operator: {							Operator: {
Operator: /							Operator: /
Operator: /							Operator: /
Identifier: bypass						Identifier: bypass
Identifier: the							Identifier: the
Identifier: current						Identifier: current
Identifier: link						Identifier: link
Identifier: previous						Identifier: previous
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: =							Operator: =
Identifier: current						Identifier: current
Operator: -							Operator: -
Operator: >							Operator: >
Identifier: next						Identifier: next
Operator: ;							Operator: ;
Operator: }							Operator: }
Identifier: return						Identifier: return
Identifier: current						Identifier: current
Operator: ;							Operator: ;
Operator: }							Operator: }
